{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseValueAndUnit;\n/**\r\n * Determines the unit of a string and parses the value\r\n *\r\n * @param {string} str\r\n * @param {object} out\r\n * @return {object} The parsed value and the unit if any\r\n */\n\nfunction parseValueAndUnit(str) {\n  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    value: 0,\n    unit: 'px'\n  };\n  var isValid = typeof str === 'number' || typeof str === 'string';\n\n  if (!isValid) {\n    throw new Error('Invalid value provided. Must provide a value as a string or number');\n  }\n\n  str = String(str);\n  out.value = parseFloat(str, 10);\n  out.unit = str.match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || '%'; // default to percent\n\n  var validUnits = ['px', '%'];\n  var isValidUnit = validUnits.find(function (unit) {\n    return unit === out.unit;\n  });\n\n  if (!isValidUnit) {\n    throw new Error('Invalid unit provided. Must provide a unit of px in or %');\n  }\n\n  return out;\n}","map":{"version":3,"sources":["C:/Users/Sam/Desktop/snax-boe-texas/node_modules/react-scroll-parallax/cjs/utils/parseValueAndUnit.js"],"names":["Object","defineProperty","exports","value","default","parseValueAndUnit","str","out","arguments","length","undefined","unit","isValid","Error","String","parseFloat","match","validUnits","isValidUnit","find"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,iBAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,iBAAT,CAA2BC,GAA3B,EAAgC;AAC9B,MAAIC,GAAG,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE;AAC5EL,IAAAA,KAAK,EAAE,CADqE;AAE5EQ,IAAAA,IAAI,EAAE;AAFsE,GAA9E;AAIA,MAAIC,OAAO,GAAG,OAAON,GAAP,KAAe,QAAf,IAA2B,OAAOA,GAAP,KAAe,QAAxD;;AAEA,MAAI,CAACM,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,oEAAV,CAAN;AACD;;AAEDP,EAAAA,GAAG,GAAGQ,MAAM,CAACR,GAAD,CAAZ;AACAC,EAAAA,GAAG,CAACJ,KAAJ,GAAYY,UAAU,CAACT,GAAD,EAAM,EAAN,CAAtB;AACAC,EAAAA,GAAG,CAACI,IAAJ,GAAWL,GAAG,CAACU,KAAJ,CAAU,mBAAV,EAA+B,CAA/B,KAAqC,GAAhD,CAb8B,CAauB;;AAErD,MAAIC,UAAU,GAAG,CAAC,IAAD,EAAO,GAAP,CAAjB;AACA,MAAIC,WAAW,GAAGD,UAAU,CAACE,IAAX,CAAgB,UAAUR,IAAV,EAAgB;AAChD,WAAOA,IAAI,KAAKJ,GAAG,CAACI,IAApB;AACD,GAFiB,CAAlB;;AAIA,MAAI,CAACO,WAAL,EAAkB;AAChB,UAAM,IAAIL,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,SAAON,GAAP;AACD","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.default = parseValueAndUnit;\r\n\r\n/**\r\n * Determines the unit of a string and parses the value\r\n *\r\n * @param {string} str\r\n * @param {object} out\r\n * @return {object} The parsed value and the unit if any\r\n */\r\nfunction parseValueAndUnit(str) {\r\n  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\r\n    value: 0,\r\n    unit: 'px'\r\n  };\r\n  var isValid = typeof str === 'number' || typeof str === 'string';\r\n\r\n  if (!isValid) {\r\n    throw new Error('Invalid value provided. Must provide a value as a string or number');\r\n  }\r\n\r\n  str = String(str);\r\n  out.value = parseFloat(str, 10);\r\n  out.unit = str.match(/[\\d.\\-\\+]*\\s*(.*)/)[1] || '%'; // default to percent\r\n\r\n  var validUnits = ['px', '%'];\r\n  var isValidUnit = validUnits.find(function (unit) {\r\n    return unit === out.unit;\r\n  });\r\n\r\n  if (!isValidUnit) {\r\n    throw new Error('Invalid unit provided. Must provide a unit of px in or %');\r\n  }\r\n\r\n  return out;\r\n}"]},"metadata":{},"sourceType":"script"}